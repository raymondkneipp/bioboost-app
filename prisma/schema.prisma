// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Weight {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  kilograms Float

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Mood {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  feeling   Feeling

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

enum Feeling {
  GREAT
  GOOD
  OKAY
  POOR
  BAD
  AWFUL
}

model BadHabit {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  failedDates DateTime[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Habit {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  name           String
  completedDates DateTime[]

  stackId String
  stack   Stack  @relation(fields: [stackId], references: [id], onDelete: Cascade)
}

model Stack {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  habits    Habit[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  weights       Weight[]
  moods         Mood[]
  badHabits     BadHabit[]
  stacks        Stack[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
